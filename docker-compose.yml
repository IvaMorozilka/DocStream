services:
  worker:
    build:
      context: ../processor/app
      args:
        - HTTP_PROXY=http://proxy.plo.lan:3128
        - HTTPS_PROXY=http://proxy.plo.lan:3128
    ports:
      - "8000:8000"
    volumes:
      - ../processor/app:/code/app
      - ./dlt_data:/var/dlt
    env_file:
      - worker.env
    networks:
      - main_network
    restart: always
    depends_on:
      - processor_db

  bot:
    build:
      context: ../wbot
      args:
        - HTTP_PROXY=http://proxy.plo.lan:3128
        - HTTPS_PROXY=http://proxy.plo.lan:3128
    restart: always
    volumes:
      - ../wbot/app:/code/app
    env_file:
      - bot.env
    networks:
      - main_network
    depends_on:
      - bot_db

  processor_db:
    image: postgres:alpine
    env_file:
      - processor_db.env
    ports:
      - "5432:5432"
    volumes:
      - ./processor_postgres_data:/var/lib/postgresql/data
    networks:
      - main_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always

  bot_db:
    image: postgres:alpine
    env_file:
      - bot_db.env
    volumes:
      - ./bot_db_data:/var/lib/postgresql/data
    networks:
      - main_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console
    volumes:
      - ./minio_data:/data
    env_file:
      - minio.env
    command: server /data --console-address ":9001"
    networks:
      - main_network
    restart: always

networks:
  main_network:
    driver: bridge
